# Questions

> To make this exercise work, rename 12-persistence.xml to persistence.xml
> Drop the existing database and recreate the database

```
drop database jpaex;
create database jpaex;
use jpaex;
```

1. How many tables are created when you run the `ManyToManyApp.java`? Why?
2. How can you update the entity model so that table structure is correctly generated?
3. Why we don't need @JoinColumn in @ManyToMany mapping?
4. How can you ensure that join table is created with name `emp_proj` and has columns `emp_id` and `proj_id`?
5. Create two employees and add them to a single project? Make sure data is saved to database.


1. Five tables will be created :
 employees
 employees_projects
 hibernate_sequence
 projects
 projects_employees

 Because we have not used mappedBy.

 2.     @ManyToMany(mappedBy = "projects")
        private List<Employee> employees; in Project.java.

 3. @joinColumn is used to create column to store foreign key but in case of @manytomany relationship there is a table
 to store relations among tables. So there is need of @JoinTable rather than @JoinColumn.

 4.     @ManyToMany
        @JoinTable(name="emp_proj",joinColumns={@JoinColumn(name="emp_id")},inverseJoinColumns={@JoinColumn(name="proj_id")})
        private List<Project> projects; in Employee.java.

 5.

            Project project=new Project("abc");
            entityManager.persist(project);
            entityManager.getTransaction().commit();
            entityManager.close();

            entityManager = entityManagerFactory.createEntityManager();
            entityManager.getTransaction().begin();
            Employee employee = new Employee("Test Employee", 1_000_000);
            Employee employee2 = new Employee("Test Employee 2", 1_5_000);
            employee.addProject(project);
            employee2.addProject(project);
            entityManager.persist(employee);
            entityManager.persist(employee2);
            entityManager.getTransaction().commit();
            entityManager.close();

            entityManager = entityManagerFactory.createEntityManager();
            Employee foundEmployee = entityManager.find(Employee.class, employee.getId());
            System.out.println(foundEmployee);
