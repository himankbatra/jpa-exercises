# Questions

> To make this exercise work, rename 14-persistence.xml to persistence.xml
> Drop the existing database and recreate the database

```
drop database jpaex;
create database jpaex character set utf8;
use jpaex;
```

1. How many tables are created? What is the table structure?
2. How can you ensure that table created for map has name `phone_numbers` instead of `Employee_phoneNumbers`?
3. How can you ensure that primary key of `phone_numbers` table has name `emp_id`?
4. How can you ensure that `phone_numbers` table has following table structure?
```
+--------------+--------------+------+-----+---------+-------+
| Field        | Type         | Null | Key | Default | Extra |
+--------------+--------------+------+-----+---------+-------+
| emp_id       | bigint(20)   | NO   | PRI | NULL    |       |
| phone_number | varchar(255) | YES  |     | NULL    |       |
| phone_type   | varchar(255) | NO   | PRI | NULL    |       |
+--------------+--------------+------+-----+---------+-------+
```
5. How can you store multiple phone numbers with a phone_type i.e. `Map<String, List<String>>`?

#Answers

1.  3 tables are created :

    phonetype_to_phone_number :emp_id, phone_number,phone_type
    employees: id,name
    hibernate_sequence

2&3 .Adding this line to phoneNumber field in Employee.java
        @CollectionTable(
            name = "phone_numbers",///for table name
            joinColumns = @JoinColumn(name = "emp_id")/// for id column in phone_numbers
                )


4. Formerly table has following structure

Employee_id	bigint(20)	NO	PRI
phoneNumbers	varchar(255)	YES
phoneNumbers_KEY	varchar(255)	NO	PRI

 @ElementCollection
    @CollectionTable(
          // name = "phonetype_to_phone_number",
            name = "phone_numbers",
            joinColumns = @JoinColumn(name = "emp_id")
    )
    @MapKeyColumn(name = "phone_type")
    @Column(name = "phone_number")
    private Map<String, String> phoneNumbers; in Employee.java.

  5.