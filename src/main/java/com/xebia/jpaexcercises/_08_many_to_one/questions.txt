# Questions

> To make this exercise work, rename 08-persistence.xml to persistence.xml

1. How many tables are created in mysql? You can view table using `show tables` command.

-> +--------------------+
   | Tables_in_jpaex    |
   +--------------------+
   | departments        |
   | employees          |
   | hibernate_sequence |
   +--------------------+
   3 rows in set (0.00 sec)

2. What is the structure of employees table? You can view table structure using `describe employees` command.

-> +---------------+--------------+------+-----+---------+-------+
   | Field         | Type         | Null | Key | Default | Extra |
   +---------------+--------------+------+-----+---------+-------+
   | id            | bigint(20)   | NO   | PRI | NULL    |       |
   | name          | varchar(255) | YES  |     | NULL    |       |
   | salary        | bigint(20)   | NO   |     | NULL    |       | -->NotNull as long datatype which can not be null.
   | department_id | bigint(20)   | YES  | MUL | NULL    |       |
   +---------------+--------------+------+-----+---------+-------+
   4 rows in set (0.03 sec)


3. What is the structure of departments table? You can view table structure using `describe departments` command.

-> +-------+--------------+------+-----+---------+-------+
   | Field | Type         | Null | Key | Default | Extra |
   +-------+--------------+------+-----+---------+-------+
   | id    | bigint(20)   | NO   | PRI | NULL    |       |
   | name  | varchar(255) | YES  |     | NULL    |       |
   +-------+--------------+------+-----+---------+-------+
   2 rows in set (0.00 sec)

4. What is the sequence of insert statements? Did Hibernate first inserted to employees and then to departments? Explain why?

-> First its departments and then employees.No it is departments and then employees.employees has many to one relation
with departments and as employees has foreign key reference to departments for that departments need to be inserted
first.

5. Did hibernate created mapping table?

-> No,as we are not fetching list of employees in departments and we are not established a bidirectional association
between our Department and Employee entities.

6. What will happen if we remove `CascadeType.PERSIST` attribute in `department` field of `Employee` class? Why it happens?

-> org.hibernate.TransientPropertyValueException:
object references an unsaved transient instance - save the transient instance before flushing.As Department entity is
not persist.first department entity should be persisted then employee will be persisted but we can specify CascadeType
.PERSIST that will make department to be persisted if employee is going to be persisted.


7. How can we ensure no employee is created without department?

->  @ManyToOne(cascade = CascadeType.PERSIST,optional = false)
    private Department department; in Employee entity.
    @NotNull
    private Department department; in Employee entity.
    @JoinColumn(nullable = false)
    @ManyToOne(cascade = CascadeType.PERSIST)
    private Department department; in Employee entity.

8. What code you will write to create two employees John and Tom associated with IT department?

->                    Department department = new Department("IT");
                      entityManager.persist(department);

                      entityManager.getTransaction().commit();

                      entityManager.close();

                      entityManager = entityManagerFactory.createEntityManager();
                      entityManager.getTransaction().begin();

                      Employee employee1 = new Employee();
                      employee1.setName("John");
                      employee1.setSalary(1_00_000);

                      employee1.setDepartment(department);
                      entityManager.persist(employee1);
                      Employee employee2 = new Employee();
                      employee2.setName("Tom");
                      employee2.setSalary(50_000);
                      employee2.setDepartment(department);
                      entityManager.persist(employee2);

                      entityManager.getTransaction().commit();

                      Employee foundEmployee1 = entityManager.find(Employee.class, employee1.getId());
                      Employee foundEmployee2 = entityManager.find(Employee.class, employee2.getId());
                      System.out.println(foundEmployee1);
                      System.out.println(foundEmployee2);

9. Which of the two entities is the owning side and which of the two is the inverse side?

-> Employee is a owning side and department is inverse side.

Since there is 1 department for N employees, each employee contains a foreign key to the department it belongs to.
This is the "connection" and this means the employee "owns" (or literally contains) the connection (information).
This is exactly the opposite from the OO/model world.

In OO, the department owns the employees (employees are a list in the department object).
There can't be an employee without a department. So the department seems to be the owner of the employees.

10. How can you change name of the join column from `department_id` to `dept_id`?

->    @ManyToOne(cascade = CascadeType.PERSIST)
      @JoinColumn(name="dept_id")
      private Department department;  in Employee entity.
